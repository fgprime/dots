return {

	-- Mapping
	--
	--------------------------------------------------------------------
	-- Terminal
	-- Replaced bei TMUX
	-- wk.register({
	--   t = {
	--     name = "[ Terminal ]",
	--     t = {
	--       function()
	--         vim.cmd([[:10 ToggleTerm direction=float <CR> ]])
	--         vim.cmd([[startinsert!]])
	--       end,
	--       "Float",
	--     },
	--     a = {
	--       "<cmd>ToggleTermToggleAll<CR>",
	--       "Toggle all",
	--     },
	--     ["1"] = {
	--       "<cmd>:1 ToggleTerm direction=horizontal <CR>",
	--       "Horizontal 1",
	--     },
	--     ["2"] = {
	--       "<cmd>:2 ToggleTerm direction=horizontal <CR>",
	--       "Horizontal 2",
	--     },
	--     ["3"] = {
	--       "<cmd>:3 ToggleTerm direction=horizontal <CR>",
	--       "Horizontal 2",
	--     },
	--     ["4"] = {
	--       "<cmd>:4 ToggleTerm direction=horizontal <CR>",
	--       "Horizontal 4",
	--     },
	--   },
	-- }, { prefix = "<leader>" })
	--------------------------------------------------------------------
	--
	--
	--
	--
	--
	-- -- ✓ fm-nvim is a Neovim plugin that lets you use your favorite terminal file managers (and fuzzy finders) from within Neovim.
	-- {
	--   "is0n/fm-nvim",
	--   opts = {
	--     ui = {
	--       -- Default UI (can be "split" or "float")
	--       default = "float",
	--
	--       float = {
	--         -- Floating window border (see ':h nvim_open_win')
	--         border = "rounded",
	--
	--         -- Highlight group for floating window/border (see ':h winhl')
	--         float_hl = "Black",
	--         border_hl = "FloatBorder",
	--
	--         -- Floating Window Transparency (see ':h winblend')
	--         blend = 0,
	--
	--         -- Num from 0 - 1 for measurements
	--         height = 0.8,
	--         width = 0.8,
	--
	--         -- X and Y Axis of Window
	--         x = 0.5,
	--         y = 0.5,
	--       },
	--
	--       split = {
	--         -- Direction of split
	--         direction = "topleft",
	--
	--         -- Size of split
	--         size = 24,
	--       },
	--     },
	--   }
	-- },
	--
	-- -- ✓ A neovim plugin to persist and toggle multiple terminals during an editing session
	-- --
	-- {
	--   "akinsho/toggleterm.nvim",
	--   config = function()
	--     require("toggleterm").setup({
	--       -- size can be a number or function which is passed the current terminal
	--       size = function(term)
	--         if term.direction == "horizontal" then
	--           return 15
	--         elseif term.direction == "vertical" then
	--           return vim.o.columns * 0.4
	--         end
	--       end,
	--       open_mapping = [[<c-t>]],
	--       -- on_create = fun(t: Terminal), -- function to run when the terminal is first created
	--       -- on_open = fun(t: Terminal), -- function to run when the terminal opens
	--       -- on_close = fun(t: Terminal), -- function to run when the terminal closes
	--       -- on_stdout = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stdout
	--       -- on_stderr = fun(t: Terminal, job: number, data: string[], name: string) -- callback for processing output on stderr
	--       -- on_exit = fun(t: Terminal, job: number, exit_code: number, name: string) -- function to run when terminal process exits
	--       hide_numbers = true, -- hide the number column in toggleterm buffers
	--       -- shade_filetypes = {},
	--       autochdir = false, -- when neovim changes it current directory the terminal will change it's own when next it's opened
	--       highlights = {
	--         --   -- highlights which map to a highlight group name and a table of it's values
	--         --   -- NOTE: this is only a subset of values, any group placed here will be set for the terminal window split
	--         Normal = {
	--           guibg = "Black",
	--         },
	--         NormalFloat = {
	--           guibg = "Black",
	--         },
	--         --   -- FloatBorder = {
	--         --   --   guifg = "<VALUE-HERE>",
	--         --   --   guibg = "<VALUE-HERE>",
	--         --   -- },
	--       },
	--       shade_terminals = false, -- NOTE: this option takes priority over highlights specified so if you specify Normal highlights you should set this to false
	--       -- shading_factor = "-20", -- the percentage by which to lighten terminal background, default: -30 (gets multiplied by -3 if background is light)
	--       start_in_insert = true,
	--       insert_mappings = true, -- whether or not the open mapping applies in insert mode
	--       terminal_mappings = true, -- whether or not the open mapping applies in the opened terminals
	--       persist_size = true,
	--       persist_mode = true, -- if set to true (default) the previous terminal mode will be remembered
	--       direction = "float",
	--       close_on_exit = true, -- close the terminal window when the process exits
	--       shell = vim.o.shell, -- change the default shell
	--       auto_scroll = true, -- automatically scroll to the bottom on terminal output
	--       -- -- This field is only relevant if direction is set to 'float'
	--       float_opts = {
	--         --   -- The border key is *almost* the same as 'nvim_open_win'
	--         --   -- see :h nvim_open_win for details on borders however
	--         --   -- the 'curved' border is a custom border type
	--         --   -- not natively supported but implemented in this plugin.
	--         border = "curved",
	--         --   -- like `size`, width and height can be a number or function which is passed the current terminal
	--         -- width = 200,
	--         -- height = 50,
	--         -- winblend = 2,
	--       },
	--     })
	--
	--     function _G.set_terminal_keymaps()
	--       local opts = { buffer = 0 }
	--       -- vim.keymap.set("t", "<esc>", [[<C-\><C-n><Cmd>ToggleTerm<CR>]], opts)
	--       vim.keymap.set("t", "<esc>", [[<C-\><C-n>]], opts)
	--       -- vim.keymap.set("t", "jk", [[<C-\><C-n>]], opts)
	--       vim.keymap.set("t", "<C-M-h>", [[<Cmd>wincmd h<CR>]], opts)
	--       vim.keymap.set("t", "<C-M-j>", [[<Cmd>wincmd j<CR>]], opts)
	--       vim.keymap.set("t", "<C-M-k>", [[<Cmd>wincmd k<CR>]], opts)
	--       vim.keymap.set("t", "<C-M-l>", [[<Cmd>wincmd l<CR>]], opts)
	--     end
	--
	--     --
	--     -- if you only want these mappings for toggle term use term://*toggleterm#* instead
	--     vim.cmd("autocmd! TermOpen term://* lua set_terminal_keymaps()")
	--   end,
	-- },
}
